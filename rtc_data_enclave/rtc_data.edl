enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tprotected_fs.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_file.edl" import *;
    from "rtc_tenclave.edl" import *;

    include "sgx_tprotected_fs.h"
    include "sgx_report.h"
    include "sgx_dh.h"
    include "bindings.h"

    // See "ECALL enclave name prefixing and --use-prefix" in HACKING.md
    trusted {
        /* define ECALLs here. */
        public CreateReportResult enclave_create_report([in]const sgx_target_info_t* p_qe3_target,
                                              [out, isary]EnclaveHeldData enclave_data,
                                              [out]sgx_report_t* p_report);

        public DataUploadResult validate_and_save(
            sgx_enclave_id_t auth_enclave_id,
            [in, count=payload_len]const uint8_t* payload_ptr,
            size_t payload_len,
            UploadMetadata metadata
        );

        public sgx_status_t local_attestation(sgx_enclave_id_t rtc_local_attestation);
    };

    untrusted {
        /* define OCALLs here. */

        sgx_status_t rtc_save_sealed_blob_u([in, count=blob_len]const uint8_t* blob_ptr, size_t blob_len,[in]uint8_t uuid[16]);
    };
};
